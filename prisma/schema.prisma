generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  dateOfBirth DateTime?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  cart      CartItem[]
  addresses Address[]
  smsCampaigns SMSCampaign[]
  smsCampaignLogs SMSCampaignLog[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int      @default(0)
  categoryId  String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]
  images      ProductImage[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  total       Float
  status      OrderStatus @default(PENDING)
  shippingAddress String
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentTransactionId String?
  paymentValidationId  String?
  paidAt      DateTime?
  customerName    String?
  customerPhone   String?
  customerEmail   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Address {
  id        String @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

model SMSCampaign {
  id            String           @id @default(cuid())
  name          String
  message       String
  recipients    String[]         // Array of phone numbers
  status        SMSStatus        @default(DRAFT)
  scheduledAt   DateTime?
  sentAt        DateTime?
  totalCount    Int              @default(0)
  deliveredCount Int             @default(0)
  failedCount   Int              @default(0)
  apiProvider   String?          // SMS_BANGLADESH, etc.
  apiResponse   Json?            // Store API response
  failedNumbers String[]         @default([])
  createdBy     String?          // Made optional for public access
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations - made optional
  user User? @relation(fields: [createdBy], references: [id])
  logs SMSCampaignLog[]

  @@map("sms_campaigns")
}

model SMSCampaignLog {
  id         String   @id @default(cuid())
  campaignId String
  action     String   // CREATED, SENT, FAILED, etc.
  details    Json?    // Additional details
  userId     String?  // Made optional for public access
  createdAt  DateTime @default(now())

  // Relations
  campaign SMSCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?       @relation(fields: [userId], references: [id])

  @@map("sms_campaign_logs")
}

enum SMSStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}
